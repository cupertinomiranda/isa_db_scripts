#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
class RelocationCalcParser < Racc::Parser

module_eval(<<'...end RelocationCalcParser.y/module_eval...', 'RelocationCalcParser.y', 34)

def parse(str)
  orig_str = str
  @yydebug = true
  @q = []
  until str.empty?
    append = ""
    case str
      when /\A(&|\||<<|>>)/
        @q.push [:BINOP, $1]
      when /\A([\~])/
        @q.push [:UNIOP, $1]
#      when /\A([\+\-\*\/]|<<|>>|&)/
#        @q.push [:BINOP, $1]
      when /\A(^[a-zA-Z][a-zA-Z0-9]*)\(/
        @q.push [:FUNC, $1]
        append = '('
      when /\A([a-zA-Z_][a-zA-Z0-9_]*)/
        @q.push [:VAR, $1]
      when /\A0x([0-9a-fA-F])+/
        @q.push [:HEX_NUMBER, $&.to_i(16)]
      when /\A\d+/
        @q.push [:NUMBER, $&.to_i]
      when /\A.|\n/o
        s = $&
        @q.push [s, s]
    end
    str = append + $'
  end
  @q.push [false, '$end']
  begin
    do_parse
  rescue  
    puts "Error parsing: --#{orig_str}--"
  end
end

 def next_token
  @q.shift
 end

...end RelocationCalcParser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,    18,    23,     2,    10,    14,    15,     4,     5,    16,
     7,     8,     9,    11,    16,    16,    14,    15,    13,    12,
    17,    16,    16,     3,    33,    16,     2,    10,    14,    15,
     4,     5,   nil,     7,     8,     9,     3,    16,   nil,     2,
    10,   nil,   nil,     4,     5,   nil,     7,     8,     9,     3,
   nil,   nil,     2,    10,   nil,   nil,     4,     5,   nil,     7,
     8,     9,     3,   nil,   nil,     2,    10,   nil,   nil,     4,
     5,   nil,     7,     8,     9,     3,   nil,   nil,     2,    10,
   nil,   nil,     4,     5,   nil,     7,     8,     9,     3,   nil,
   nil,     2,    10,   nil,   nil,     4,     5,   nil,     7,     8,
     9,     3,   nil,   nil,     2,    10,   nil,   nil,     4,     5,
   nil,     7,     8,     9,     3,   nil,   nil,     2,    10,   nil,
   nil,     4,     5,   nil,     7,     8,     9,     3,   nil,   nil,
     2,    10,   nil,   nil,     4,     5,   nil,     7,     8,     9,
     3,   nil,   nil,     2,    10,   nil,   nil,     4,     5,   nil,
     7,     8,     9,     3,   nil,   nil,     2,    10,   nil,   nil,
     4,     5,   nil,     7,     8,     9,    14,    15,    13,    12,
    17,   nil,   nil,     3,   nil,    16,     2,    10,    34,   nil,
     4,     5,   nil,     7,     8,     9,    14,    15,    13,    12,
    17,   nil,   nil,   nil,   nil,    16,    14,    15,    13,    12,
    17,   nil,   nil,   nil,    32,    16,    14,    15,    13,    12,
    17,    14,    15,    13,    12,    16,   nil,   nil,   nil,   nil,
    16 ]

racc_action_check = [
     0,     2,    11,     0,     0,    24,    24,     0,     0,    19,
     0,     0,     0,     1,    24,    20,     1,     1,     1,     1,
     1,    26,    27,     3,    30,     1,     3,     3,    25,    25,
     3,     3,   nil,     3,     3,     3,     4,    25,   nil,     4,
     4,   nil,   nil,     4,     4,   nil,     4,     4,     4,     5,
   nil,   nil,     5,     5,   nil,   nil,     5,     5,   nil,     5,
     5,     5,    10,   nil,   nil,    10,    10,   nil,   nil,    10,
    10,   nil,    10,    10,    10,    12,   nil,   nil,    12,    12,
   nil,   nil,    12,    12,   nil,    12,    12,    12,    13,   nil,
   nil,    13,    13,   nil,   nil,    13,    13,   nil,    13,    13,
    13,    14,   nil,   nil,    14,    14,   nil,   nil,    14,    14,
   nil,    14,    14,    14,    15,   nil,   nil,    15,    15,   nil,
   nil,    15,    15,   nil,    15,    15,    15,    16,   nil,   nil,
    16,    16,   nil,   nil,    16,    16,   nil,    16,    16,    16,
    17,   nil,   nil,    17,    17,   nil,   nil,    17,    17,   nil,
    17,    17,    17,    18,   nil,   nil,    18,    18,   nil,   nil,
    18,    18,   nil,    18,    18,    18,    31,    31,    31,    31,
    31,   nil,   nil,    34,   nil,    31,    34,    34,    31,   nil,
    34,    34,   nil,    34,    34,    34,    21,    21,    21,    21,
    21,   nil,   nil,   nil,   nil,    21,    22,    22,    22,    22,
    22,   nil,   nil,   nil,    22,    22,    28,    28,    28,    28,
    28,    29,    29,    29,    29,    28,   nil,   nil,   nil,   nil,
    29 ]

racc_action_pointer = [
    -6,    13,    -9,    17,    30,    43,   nil,   nil,   nil,   nil,
    56,     2,    69,    82,    95,   108,   121,   134,   147,    -3,
     3,   183,   193,   nil,     2,    25,     9,    10,   203,   208,
    13,   163,   nil,   nil,   167,   nil ]

racc_action_default = [
   -18,   -18,   -18,   -18,   -18,   -18,   -11,   -14,   -15,   -16,
   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,   -18,    -8,
    -9,   -10,   -18,    36,    -2,    -3,    -4,    -5,    -6,    -7,
   -18,   -13,   -17,    -1,   -18,   -12 ]

racc_goto_table = [
     1,   nil,    30,    19,    20,    21,   nil,   nil,   nil,   nil,
    22,   nil,    24,    25,    26,    27,    28,    29,    35 ]

racc_goto_check = [
     1,   nil,     2,     1,     1,     1,   nil,   nil,   nil,   nil,
     1,   nil,     1,     1,     1,     1,     1,     1,     2 ]

racc_goto_pointer = [
   nil,     0,   -16,   nil ]

racc_goto_default = [
   nil,    31,   nil,     6 ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 20, :_reduce_1,
  3, 20, :_reduce_2,
  3, 20, :_reduce_3,
  3, 20, :_reduce_4,
  3, 20, :_reduce_5,
  3, 20, :_reduce_6,
  3, 20, :_reduce_7,
  2, 20, :_reduce_8,
  2, 20, :_reduce_9,
  2, 20, :_reduce_10,
  1, 20, :_reduce_none,
  3, 21, :_reduce_12,
  1, 21, :_reduce_13,
  1, 22, :_reduce_14,
  1, 22, :_reduce_15,
  1, 22, :_reduce_16,
  3, 22, :_reduce_17 ]

racc_reduce_n = 18

racc_shift_n = 36

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  :BINOP => 7,
  :SHIFT => 8,
  :FUNC => 9,
  "(" => 10,
  ")" => 11,
  "&" => 12,
  "~" => 13,
  :UNIOP => 14,
  "," => 15,
  :VAR => 16,
  :NUMBER => 17,
  :HEX_NUMBER => 18 }

racc_nt_base = 19

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "BINOP",
  "SHIFT",
  "FUNC",
  "\"(\"",
  "\")\"",
  "\"&\"",
  "\"~\"",
  "UNIOP",
  "\",\"",
  "VAR",
  "NUMBER",
  "HEX_NUMBER",
  "$start",
  "stmt",
  "stmt_list",
  "leaf" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'RelocationCalcParser.y', 10)
  def _reduce_1(val, _values, result)
     return RelocationCalc.new({type: 'func', name: val[0], param: val[2]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 11)
  def _reduce_2(val, _values, result)
     return RelocationCalc.new({type: 'binop', name: val[1],  lhs: val[0], rhs: val[2] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 12)
  def _reduce_3(val, _values, result)
     return RelocationCalc.new({type: 'binop', name: val[1],  lhs: val[0], rhs: val[2] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 13)
  def _reduce_4(val, _values, result)
     return RelocationCalc.new({type: 'binop', name: val[1],  lhs: val[0], rhs: val[2] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 14)
  def _reduce_5(val, _values, result)
     return RelocationCalc.new({type: 'binop', name: val[1],  lhs: val[0], rhs: val[2] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 15)
  def _reduce_6(val, _values, result)
     return RelocationCalc.new({type: 'binop', name: val[1],  lhs: val[0], rhs: val[2] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 16)
  def _reduce_7(val, _values, result)
     return RelocationCalc.new({type: 'binop', name: val[1],  lhs: val[0], rhs: val[2] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 17)
  def _reduce_8(val, _values, result)
     return RelocationCalc.new({type: 'uniop', name: val[0],               rhs: val[1] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 18)
  def _reduce_9(val, _values, result)
     return RelocationCalc.new({type: 'uniop', name: val[0],               rhs: val[1] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 19)
  def _reduce_10(val, _values, result)
     return RelocationCalc.new({type: 'uniop', name: val[0],               rhs: val[1] }) 
    result
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'RelocationCalcParser.y', 22)
  def _reduce_12(val, _values, result)
     return [val[0]].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 23)
  def _reduce_13(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 25)
  def _reduce_14(val, _values, result)
     return RelocationCalc.new(type: 'var', var: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 26)
  def _reduce_15(val, _values, result)
     return RelocationCalc.new(type: 'number', number: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 27)
  def _reduce_16(val, _values, result)
     return RelocationCalc.new(type: 'number', number: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 28)
  def _reduce_17(val, _values, result)
     return val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RelocationCalcParser


class RelocationCalc
  def initialize(params)
    @object = params
  end


  def self.parse(string)
    RelocationCalcParser.new.parse(string)
  end

#  def debug()
#    case @object[:type]
#      when /binop/
#        return "(#{@object[:lhs].debug})#{@object[:name]}(#{@object[:rhs].debug})"
#      when /uniop/
#        return "(#{@object[:name]}(#{@object[:rhs].debug})"
#      when /var/
#        return "(#{@object[:var]})"
#      when /number/
#        return "(#{@object[:number]})"
#      else
#        raise "Object type is invalid"
#    end
#  end

  def to_c(r={})
    case @object[:type]
      when /binop/
        return "( #{@object[:lhs].to_c(r)} #{@object[:name]} #{@object[:rhs].to_c(r)} )"
      when /uniop/
        return "( #{@object[:name]}#{@object[:rhs].to_c(r)} )"
      when /var/
        var_name = @object[:var].to_sym
        #puts "VAR_NAME= #{var_name}"
        return r[var_name] if r[var_name] != nil
        return @object[:var]
      when /number/
        return "#{@object[:number]}"
      else
        raise "Object type is invalid"
    end
    
  end
end
