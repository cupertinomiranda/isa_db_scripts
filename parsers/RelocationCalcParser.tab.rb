#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
class RelocationCalcParser < Racc::Parser

module_eval(<<'...end RelocationCalcParser.y/module_eval...', 'RelocationCalcParser.y', 31)

def parse(str)
  orig_str = str
  @yydebug = true
  @q = []
  until str.empty?
    append = ""
    case str
      when /\A(&|\||<<|>>)/
        @q.push [:BINOP, $1]
      when /\A([\~])/
        @q.push [:UNIOP, $1]
#      when /\A([\+\-\*\/]|<<|>>|&)/
#        @q.push [:BINOP, $1]
      when /\A(^[a-zA-Z][a-zA-Z0-9]*)\(/
        @q.push [:FUNC, $1]
        append = '('
      when /\A([a-zA-Z_][a-zA-Z0-9_]*)/
        @q.push [:VAR, $1]
      when /\A\d+/
        @q.push [:NUMBER, $&.to_i]
      when /\A.|\n/o
        s = $&
        @q.push [s, s]
    end
    str = append + $'
  end
  @q.push [false, '$end']
  begin
    do_parse
  rescue  
    puts "Error parsing: --#{orig_str}--"
  end
end

 def next_token
  @q.shift
 end

...end RelocationCalcParser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    12,    13,    11,    10,    14,     3,    12,    13,     2,     8,
    29,     4,     3,     6,     7,     2,     8,    15,     4,     3,
     6,     7,     2,     8,    19,     4,     3,     6,     7,     2,
     8,    28,     4,     3,     6,     7,     2,     8,   nil,     4,
     3,     6,     7,     2,     8,   nil,     4,     3,     6,     7,
     2,     8,   nil,     4,     3,     6,     7,     2,     8,   nil,
     4,     3,     6,     7,     2,     8,   nil,     4,     3,     6,
     7,     2,     8,   nil,     4,     3,     6,     7,     2,     8,
   nil,     4,   nil,     6,     7,    12,    13,    11,    10,    14,
   nil,     9,   nil,    27,    12,    13,    11,    10,    14,    12,
    13,    11,    10,    14,    12,    13,    11,    10,    12,    13 ]

racc_action_check = [
    26,    26,    26,    26,    26,     0,    20,    20,     0,     0,
    26,     0,     3,     0,     0,     3,     3,     2,     3,     4,
     3,     3,     4,     4,     9,     4,     8,     4,     4,     8,
     8,    25,     8,    10,     8,     8,    10,    10,   nil,    10,
    11,    10,    10,    11,    11,   nil,    11,    12,    11,    11,
    12,    12,   nil,    12,    13,    12,    12,    13,    13,   nil,
    13,    14,    13,    13,    14,    14,   nil,    14,    15,    14,
    14,    15,    15,   nil,    15,    29,    15,    15,    29,    29,
   nil,    29,   nil,    29,    29,    18,    18,    18,    18,    18,
   nil,     1,   nil,    18,     1,     1,     1,     1,     1,    17,
    17,    17,    17,    17,    24,    24,    24,    24,    21,    21 ]

racc_action_pointer = [
    -1,    91,     7,     6,    13,   nil,   nil,   nil,    20,    24,
    27,    34,    41,    48,    55,    62,   nil,    96,    82,   nil,
     3,   105,   nil,   nil,   101,    20,    -3,   nil,   nil,    69,
   nil ]

racc_action_default = [
   -15,   -15,   -15,   -15,   -15,    -9,   -12,   -13,   -15,   -15,
   -15,   -15,   -15,   -15,   -15,   -15,    -7,    -8,   -15,    31,
    -2,    -3,    -4,    -5,    -6,   -15,   -11,   -14,    -1,   -15,
   -10 ]

racc_goto_table = [
     1,    25,   nil,    16,    17,   nil,   nil,   nil,    18,   nil,
    20,    21,    22,    23,    24,    30 ]

racc_goto_check = [
     1,     2,   nil,     1,     1,   nil,   nil,   nil,     1,   nil,
     1,     1,     1,     1,     1,     2 ]

racc_goto_pointer = [
   nil,     0,   -14,   nil ]

racc_goto_default = [
   nil,    26,   nil,     5 ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 17, :_reduce_1,
  3, 17, :_reduce_2,
  3, 17, :_reduce_3,
  3, 17, :_reduce_4,
  3, 17, :_reduce_5,
  3, 17, :_reduce_6,
  2, 17, :_reduce_7,
  2, 17, :_reduce_8,
  1, 17, :_reduce_none,
  3, 18, :_reduce_10,
  1, 18, :_reduce_11,
  1, 19, :_reduce_12,
  1, 19, :_reduce_13,
  3, 19, :_reduce_14 ]

racc_reduce_n = 15

racc_shift_n = 31

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "*" => 3,
  "/" => 4,
  "+" => 5,
  "-" => 6,
  :BINOP => 7,
  :SHIFT => 8,
  :FUNC => 9,
  "(" => 10,
  ")" => 11,
  :UNIOP => 12,
  "," => 13,
  :VAR => 14,
  :NUMBER => 15 }

racc_nt_base = 16

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "BINOP",
  "SHIFT",
  "FUNC",
  "\"(\"",
  "\")\"",
  "UNIOP",
  "\",\"",
  "VAR",
  "NUMBER",
  "$start",
  "stmt",
  "stmt_list",
  "leaf" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'RelocationCalcParser.y', 10)
  def _reduce_1(val, _values, result)
     return RelocationCalc.new({type: 'func', name: val[0], param: val[2]}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 11)
  def _reduce_2(val, _values, result)
     return RelocationCalc.new({type: 'binop', name: val[1],  lhs: val[0], rhs: val[2] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 12)
  def _reduce_3(val, _values, result)
     return RelocationCalc.new({type: 'binop', name: val[1],  lhs: val[0], rhs: val[2] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 13)
  def _reduce_4(val, _values, result)
     return RelocationCalc.new({type: 'binop', name: val[1],  lhs: val[0], rhs: val[2] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 14)
  def _reduce_5(val, _values, result)
     return RelocationCalc.new({type: 'binop', name: val[1],  lhs: val[0], rhs: val[2] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 15)
  def _reduce_6(val, _values, result)
     return RelocationCalc.new({type: 'binop', name: val[1],  lhs: val[0], rhs: val[2] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 16)
  def _reduce_7(val, _values, result)
     return RelocationCalc.new({type: 'uniop', name: 'minus',              rhs: val[1] }) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 17)
  def _reduce_8(val, _values, result)
     return RelocationCalc.new({type: 'uniop', name: val[0],               rhs: val[1] }) 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'RelocationCalcParser.y', 20)
  def _reduce_10(val, _values, result)
     return [val[0]].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 21)
  def _reduce_11(val, _values, result)
     return [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 23)
  def _reduce_12(val, _values, result)
     return RelocationCalc.new(type: 'var', var: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 24)
  def _reduce_13(val, _values, result)
     return RelocationCalc.new(type: 'number', number: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'RelocationCalcParser.y', 25)
  def _reduce_14(val, _values, result)
     return val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RelocationCalcParser


class RelocationCalc
  def initialize(params)
    @object = params
  end


  def self.parse(string)
    RelocationCalcParser.new.parse(string)
  end

#  def debug()
#    case @object[:type]
#      when /binop/
#        return "(#{@object[:lhs].debug})#{@object[:name]}(#{@object[:rhs].debug})"
#      when /uniop/
#        return "(#{@object[:name]}(#{@object[:rhs].debug})"
#      when /var/
#        return "(#{@object[:var]})"
#      when /number/
#        return "(#{@object[:number]})"
#      else
#        raise "Object type is invalid"
#    end
#  end

  def to_c(r={})
    case @object[:type]
      when /binop/
        return "( #{@object[:lhs].to_c(r)} #{@object[:name]} #{@object[:rhs].to_c(r)} )"
      when /uniop/
        return "( #{@object[:name]}#{@object[:rhs].to_c(r)} )"
      when /var/
        var_name = @object[:var].to_sym
        #puts "VAR_NAME= #{var_name}"
        return r[var_name] if r[var_name] != nil
        return @object[:var]
      when /number/
        return "#{@object[:number]}"
      else
        raise "Object type is invalid"
    end
    
  end
end
